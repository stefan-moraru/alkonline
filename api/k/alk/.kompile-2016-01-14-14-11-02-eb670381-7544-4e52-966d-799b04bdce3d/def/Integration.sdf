module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

imports Variables

exports

context-free syntax
context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1373Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1474Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1358Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool1236Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1346Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1472Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1467Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1389Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1408Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map178Syn")}
} > {
    Map Map -> Map {left, cons("Map1250Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1478Syn")}
    K "=/=K" K -> Bool {left, cons("Bool196Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1478Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool134Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1329Syn")}
    K "=/=K" K -> Bool {left, cons("Bool196Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1467Syn")}
    "notBool" Bool -> Bool {cons("Bool1373Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1358Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1346Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1472Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool1236Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1474Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool134Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1329Syn")}
}

context-free priorities
{
    "~Int" Int -> Int {cons("Int1264Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int177Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int174Syn")}
    Int "/Int" Int -> Int {left, cons("Int1233Syn")}
    Int "%Int" Int -> Int {left, cons("Int1338Syn")}
    Int "divInt" Int -> Int {left, cons("Int1435Syn")}
    Int "modInt" Int -> Int {left, cons("Int175Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1355Syn")}
    Int "-Int" Int -> Int {left, cons("Int1296Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int1238Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1257Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int1260Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int198Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int197Syn")}
}

context-free priorities
{
    "--Float" Float -> Float {cons("Float1353Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float120Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float1240Syn")}
    Float "/Float" Float -> Float {left, cons("Float168Syn")}
    Float "%Float" Float -> Float {left, cons("Float1428Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1485Syn")}
    Float "-Float" Float -> Float {left, cons("Float1354Syn")}
}

context-free priorities
{
    Id -> Exp {}
    Value -> Exp {}
    "++" Id -> Exp {cons("Exp1380Syn")}
    "--" Id -> Exp {cons("Exp1487Syn")}
} > {
    Exp "." Id -> Exp {cons("Exp1332Syn")}
    Exp "[" InsertDzExp "]" -> Exp {cons("Exp1208Syn")}
    Exp "." "at" "(" InsertDzExp ")" -> Exp {cons("Exp1420Syn")}
    Exp "." "topFront" "(" ")" -> Exp {cons("Exp1302Syn")}
    Exp "." "topBack" "(" ")" -> Exp {cons("Exp1463Syn")}
    Exp "." "size" "(" ")" -> Exp {cons("Exp1323Syn")}
    Exp "." "update" "(" InsertDzExp "," InsertDzExp ")" -> Exp {cons("Exp189Syn")}
    Exp "." "insert" "(" InsertDzExp "," InsertDzExp ")" -> Exp {cons("Exp1283Syn")}
    Exp "." "removeAt" "(" InsertDzExp ")" -> Exp {cons("Exp1290Syn")}
    Exp "." "removeAllEqTo" "(" InsertDzExp ")" -> Exp {cons("Exp192Syn")}
    Exp "." "pushFront" "(" InsertDzExp ")" -> Exp {cons("Exp1279Syn")}
    Exp "." "pushBack" "(" InsertDzExp ")" -> Exp {cons("Exp137Syn")}
} > { left:
    Exp "*" Exp -> Exp {left, cons("Exp1403Syn")}
    Exp "/" Exp -> Exp {left, cons("Exp1438Syn")}
    Exp "%" Exp -> Exp {left, cons("Exp1275Syn")}
} > { left:
    Exp "+" Exp -> Exp {left, cons("Exp1387Syn")}
    Exp "-" Exp -> Exp {left, cons("Exp1363Syn")}
} > { left:
    Exp "U" Exp -> Exp {left, cons("Exp1202Syn")}
    Exp "^" Exp -> Exp {left, cons("Exp135Syn")}
    Exp "\\" Exp -> Exp {left, cons("Exp1276Syn")}
} > {
    Exp InsertDzOpRel Exp -> Exp {cons("Exp1280Syn")}
} > {
    Exp "belongsTo" Exp -> Exp {cons("Exp1469Syn")}
} > {
    ExclamationMarkDz Exp -> Exp {cons("Exp1454Syn")}
} > { left:
    Exp "&&" Exp -> Exp {left, cons("Exp1382Syn")}
    Exp "||" Exp -> Exp {left, cons("Exp1309Syn")}
}

context-free priorities
{
    Id "(" InsertDzIds ")" "{" InsertDzStmt "}" -> Stmt {cons("Stmt1294Syn")}
    Id "(" InsertDzExps ")" ";" -> Stmt {cons("Stmt1288Syn")}
    Exp "=" InsertDzExp ";" -> Stmt {cons("Stmt16Syn")}
    Exp "." "update" "(" InsertDzExp "," InsertDzExp ")" ";" -> Stmt {cons("Stmt180Syn")}
    Exp "." "insert" "(" InsertDzExp "," InsertDzExp ")" ";" -> Stmt {cons("Stmt170Syn")}
    Exp "." "removeAt" "(" InsertDzExp ")" ";" -> Stmt {cons("Stmt183Syn")}
    Exp "." "removeAllEqTo" "(" InsertDzExp ")" ";" -> Stmt {cons("Stmt1453Syn")}
    Exp "." "pushFront" "(" InsertDzExp ")" ";" -> Stmt {cons("Stmt1352Syn")}
    Exp "." "pushBack" "(" InsertDzExp ")" ";" -> Stmt {cons("Stmt1325Syn")}
    "if" "(" InsertDzExp ")" InsertDzStmt "else" Stmt -> Stmt {cons("Stmt1489Syn")}
    "if" "(" InsertDzExp ")" Stmt -> Stmt {cons("Stmt1370Syn")}
    "while" "(" InsertDzExp ")" Stmt -> Stmt {cons("Stmt125Syn")}
    "forall" InsertDzId "in" InsertDzExp Stmt -> Stmt {cons("Stmt1282Syn")}
    "for" "(" InsertDzId "=" InsertDzExp ";" InsertDzExp InsertDzOpRel InsertDzExp ";" InsertDzId "=" InsertDzExp ")" Stmt -> Stmt {cons("Stmt185Syn")}
} > {
    Stmt Stmt -> Stmt {right, cons("Stmt1295Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    Set -> K
    ValueOrValueList -> K
    ValueList -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    ValFld -> K
    Bool -> K
    OpRel -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    DdVar -> K
    UpperCase -> K
    ValFldList -> K
    ExtendedValue -> K
    ExtendedValueList -> K
    Float -> K
    IOError -> K
    Exps -> K
    Value -> K
    Id -> K
    Exp -> K
    Map -> K
    DzFloat -> K
    Interval -> K
} .> {
    ExtendedValue -> ExtendedValueList
    ValueList -> ValueOrValueList
    DzInt -> Int
    Int -> Value
    Ids -> Exps
    ValueList -> Exps
    Bool -> Value
    Id -> Ids
    Value -> ValueList
    DzBool -> Bool
    DdVar -> Value
    DzFloat -> Float
    String -> Value
    ValueList -> ExtendedValueList
    Value -> Exp
    Value -> ValueOrValueList
    ExtendedValue -> Exp
    DzString -> String
    Exp -> Exps
    ExtendedValueList -> Exps
    Value -> ExtendedValue
    Id -> Exp
    Float -> Value
    ValFld -> ValFldList
} .> {
    K -> Nat
    K -> Set
    K -> ValueOrValueList
    K -> ValueList
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> ValFld
    K -> Bool
    K -> OpRel
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> DdVar
    K -> UpperCase
    K -> ValFldList
    K -> ExtendedValue
    K -> ExtendedValueList
    K -> Float
    K -> IOError
    K -> Exps
    K -> Value
    K -> Id
    K -> Exp
    K -> Map
    K -> DzFloat
    K -> Interval
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    Set -> K
    ValueOrValueList -> K
    ValueList -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    ValFld -> K
    Bool -> K
    OpRel -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    DdVar -> K
    UpperCase -> K
    ValFldList -> K
    ExtendedValue -> K
    ExtendedValueList -> K
    Float -> K
    IOError -> K
    Exps -> K
    Value -> K
    Id -> K
    Exp -> K
    Map -> K
    DzFloat -> K
    Interval -> K
} .> {
    K -> Nat
    K -> Set
    K -> ValueOrValueList
    K -> ValueList
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> ValFld
    K -> Bool
    K -> OpRel
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> DdVar
    K -> UpperCase
    K -> ValFldList
    K -> ExtendedValue
    K -> ExtendedValueList
    K -> Float
    K -> IOError
    K -> Exps
    K -> Value
    K -> Id
    K -> Exp
    K -> Map
    K -> DzFloat
    K -> Interval
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> Set
    K -> ValueOrValueList
    K -> ValueList
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> ValFld
    K -> Bool
    K -> OpRel
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> DdVar
    K -> UpperCase
    K -> ValFldList
    K -> ExtendedValue
    K -> ExtendedValueList
    K -> Float
    K -> IOError
    K -> Exps
    K -> Value
    K -> Id
    K -> Exp
    K -> Map
    K -> DzFloat
    K -> Interval
} .> {
    Nat -> K
    Set -> K
    ValueOrValueList -> K
    ValueList -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    ValFld -> K
    Bool -> K
    OpRel -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    DdVar -> K
    UpperCase -> K
    ValFldList -> K
    ExtendedValue -> K
    ExtendedValueList -> K
    Float -> K
    IOError -> K
    Exps -> K
    Value -> K
    Id -> K
    Exp -> K
    Map -> K
    DzFloat -> K
    Interval -> K
}
context-free syntax
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream10Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem12Syn")}
    K "inKList" KList -> Bool {cons("Bool13Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int14Syn")}
    ">" -> OpRel {cons("OpRel15Syn")}
    "!=" -> OpRel {cons("OpRel17Syn")}
    "#EISDIR" -> IOError {cons("IOError18Syn")}
    "$i" -> Id {cons("Id19Syn")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map122Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map123Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float124Syn")}
    Map "=Map" Map -> Bool {cons("Bool126Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float127Syn")}
    Id "->" Value -> ValFld {cons("ValFld128Syn")}
    Set "=Set" Set -> Bool {cons("Bool129Syn")}
    String "<String" String -> Bool {cons("Bool130Syn")}
    Float -> Value {}
    "values" "(" InsertDzMap ")" -> List {cons("List132Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float133Syn")}
    ".List" -> List {cons("List136Syn")}
    ValueList "$cup" ValueList -> ValueList {cons("ValueList138Syn")}
    "#EBADF" -> IOError {cons("IOError139Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream140Syn")}
    "<" InsertDzInterval ">" -> Exp {cons("Exp142Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String143Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool144Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool145Syn")}
    "#stderr" -> Int {cons("Int146Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool147Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int148Syn")}
    Map "-Map" Map -> Map {cons("Map149Syn")}
    "{" InsertDzStmt "}" -> Stmt {cons("Stmt150Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float152Syn")}
    ValueOrValueList "." "$removeAllEqTo" "(" InsertDzValue ")" -> ValueOrValueList {cons("ValueOrValueList153Syn")}
    ValueList "." "$insert" "(" InsertDzInt "," InsertDzExtendedValue ")" -> ValueList {cons("ValueList154Syn")}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String155Syn")}
    "{" InsertDzValueList "}" -> Value {cons("Value156Syn")}
    Value "." "$insert" "(" InsertDzInt "," InsertDzExtendedValue ")" -> Value {cons("Value157Syn")}
    "$removeAllEqToVal" "(" InsertDzExtendedValue ")" -> ExtendedValue {cons("ExtendedValue158Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String159Syn")}
    Set "-Set" Set -> Set {cons("Set160Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool162Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel163Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream164Syn")}
    String "=/=String" String -> Bool {left, cons("Bool165Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id166Syn")}
    "<" -> OpRel {cons("OpRel167Syn")}
    DzInt -> Int {}
    "#freezer" K -> KLabel {cons("KLabel169Syn")}
    Value "$in" ValueOrValueList -> Bool {cons("Bool172Syn")}
    ValueOrValueList "." "$update" "(" InsertDzInt "," InsertDzExtendedValue ")" -> ValueOrValueList {cons("ValueOrValueList173Syn")}
    Value -> ExtendedValue {}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int176Syn")}
    K "|->" K -> Map {cons("Map178Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int179Syn")}
    "size" "(" InsertDzList ")" -> Int {cons("Int182Syn")}
    "NULL" -> DdVar {cons("DdVar184Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map186Syn")}
    Int "=Int" Int -> Bool {cons("Bool187Syn")}
    ValueList "." "$update" "(" InsertDzInt "," InsertDzExtendedValue ")" -> ValueList {cons("ValueList188Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List190Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float193Syn")}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int194Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float195Syn")}
    Exp "," Exps -> Exps {cons("Exps1ListSyn")}
    ".Exps" -> Exps {cons("Exps1Empty")}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList199Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String1200Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1203Syn")}
    "$removeAtVal" "(" InsertDzInt ")" -> ExtendedValue {cons("ExtendedValue1204Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1205Syn")}
    Value "." "$removeAllEqTo" "(" InsertDzValue ")" -> Value {cons("Value1206Syn")}
    "{" InsertDzValFldList "}" -> Value {cons("Value1207Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList1209Syn")}
    ValueOrValueList "." "$removeAt" "(" InsertDzInt ")" -> ValueOrValueList {cons("ValueOrValueList1220Syn")}
    "tan" "(" InsertDzExp ")" -> Exp {cons("Exp1222Syn")}
    Int "<Int" Int -> Bool {left, cons("Bool1223Syn")}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool1224Syn")}
    "acos" "(" InsertDzExp ")" -> Exp {cons("Exp1225Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int1226Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int1227Syn")}
    "sin" "(" InsertDzExp ")" -> Exp {cons("Exp1228Syn")}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float1229Syn")}
    Exp ".." Exp -> Interval {cons("Interval1230Syn")}
    "$insertVal" "(" InsertDzInt "," InsertDzExtendedValue ")" -> ExtendedValue {cons("ExtendedValue1232Syn")}
    String -> Value {}
    ExtendedValue "," ExtendedValueList -> ExtendedValueList {cons("ExtendedValueList1ListSyn")}
    ".ExtendedValueList" -> ExtendedValueList {cons("ExtendedValueList1Empty")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int1234Syn")}
    Int -> Value {}
    "cool" "(" InsertDzK ")" -> K {cons("K1235Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List1237Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String1239Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1242Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String1243Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1244Syn")}
    DzBool -> Bool {}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool1245Syn")}
    Set "<=Set" Set -> Bool {cons("Bool1246Syn")}
    KList "=KList" KList -> Bool {cons("Bool1247Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1248Syn")}
    ValueList "." "$removeAt" "(" InsertDzInt ")" -> ValueList {cons("ValueList1249Syn")}
    Map Map -> Map {left, cons("Map1250Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1252Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1253Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1254Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1255Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1256Syn")}
    "#noIO" -> Stream {cons("Stream1258Syn")}
    ">=" -> OpRel {cons("OpRel1259Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1262Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1263Syn")}
    "#EACCES" -> IOError {cons("IOError1265Syn")}
    List "=List" List -> Bool {cons("Bool1266Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1267Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1268Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1269Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1270Syn")}
    ValueList -> ValueOrValueList {}
    ValueOrValueList "." "$size" "(" ")" -> Int {cons("Int1272Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1273Syn")}
    "sqrt" "(" InsertDzExp ")" -> Exp {cons("Exp1277Syn")}
    Set Set -> Set {left, cons("Set1278Syn")}
    Value "." "$removeAt" "(" InsertDzInt ")" -> Value {cons("Value1284Syn")}
    Map "[" InsertDzK "]" -> K {cons("K1285Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1286Syn")}
    ExtendedValue -> Exp {}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1287Syn")}
    Id "," Ids -> Ids {cons("Ids1ListSyn")}
    ".Ids" -> Ids {cons("Ids1Empty")}
    K "#inKList" KList -> Bool {cons("Bool1289Syn")}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1292Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1293Syn")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1297Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1298Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1299Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1300Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1303Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1304Syn")}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1305Syn")}
    Value "." "$update" "(" InsertDzInt "," InsertDzExtendedValue ")" -> Value {cons("Value1306Syn")}
    "$updateVal" "(" InsertDzInt "," InsertDzExtendedValue ")" -> ExtendedValue {cons("ExtendedValue1307Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1308Syn")}
    K -> KList {}
    KList "=/=KList" KList -> Bool {cons("Bool1320Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1322Syn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1324Syn")}
    DzString -> String {}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1326Syn")}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1328Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1330Syn")}
    "[" InsertDzInterval "]" -> Exp {cons("Exp1334Syn")}
    "new" "(" InsertDzExp ")" -> Exp {cons("Exp1335Syn")}
    DzFloat -> Float {}
    "<=" -> OpRel {cons("OpRel1336Syn")}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1337Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1339Syn")}
    "#ELOOP" -> IOError {cons("IOError1340Syn")}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1342Syn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1343Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1344Syn")}
    "#stdin" -> Int {cons("Int1345Syn")}
    "==" -> OpRel {cons("OpRel1347Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1348Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1349Syn")}
    "#configuration" -> Bag {cons("Bag1350Syn")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1356Syn")}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1359Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1360Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1362Syn")}
    KItem -> K {}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1364Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1365Syn")}
    ".Set" -> Set {cons("Set1366Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1367Syn")}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1368Syn")}
    "$isSet" "(" InsertDzValueList ")" -> Bool {cons("Bool1369Syn")}
    List List -> List {left, cons("List1372Syn")}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1374Syn")}
    ValueOrValueList "." "$lookup" "(" InsertDzValue ")" -> Value {cons("Value1375Syn")}
    Map "<=Map" Map -> Bool {cons("Bool1376Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1377Syn")}
    "<" InsertDzValueList ">" -> Value {cons("Value1378Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1379Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1383Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1384Syn")}
    String "==String" String -> Bool {left, cons("Bool1385Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1386Syn")}
    ValueList "." "$removeAllEqTo" "(" InsertDzValue ")" -> ValueList {cons("ValueList1388Syn")}
    String "+String" String -> String {left, cons("String1390Syn")}
    String ">=String" String -> Bool {cons("Bool1392Syn")}
    ValueList "$cap" ValueList -> ValueList {cons("ValueList1393Syn")}
    K "in" Set -> Bool {cons("Bool1394Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1395Syn")}
    Value -> ValueOrValueList {}
    ".Map" -> Map {cons("Map1396Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1397Syn")}
    KList "==KList" KList -> Bool {cons("Bool1398Syn")}
    Int "==Int" Int -> Bool {left, cons("Bool1399Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1402Syn")}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1404Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1405Syn")}
    "atan" "(" InsertDzExp ")" -> Exp {cons("Exp1406Syn")}
    "#ENOENT" -> IOError {cons("IOError1407Syn")}
    DdVar -> Value {}
    "#EINVAL" -> IOError {cons("IOError1409Syn")}
    String ">String" String -> Bool {cons("Bool1422Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1423Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1424Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1425Syn")}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1426Syn")}
    List "[" InsertDzInt "]" -> K {cons("K1427Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1429Syn")}
    ValFldList "." "$update" "(" InsertDzId "," InsertDzExtendedValue ")" -> ValFldList {cons("ValFldList1430Syn")}
    "#stdout" -> Int {cons("Int1432Syn")}
    "{" InsertDzInterval "}" -> Exp {cons("Exp1433Syn")}
    "$updateVal" "(" InsertDzId "," InsertDzExtendedValue ")" -> ExtendedValue {cons("ExtendedValue1434Syn")}
    "#noparse" -> IOError {cons("IOError1436Syn")}
    Float ">Float" Float -> Bool {left, cons("Bool1437Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1439Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1440Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1442Syn")}
    Value "," ValueList -> ValueList {cons("ValueList1ListSyn")}
    ".ValueList" -> ValueList {cons("ValueList1Empty")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1443Syn")}
    "countAllOccurrences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1444Syn")}
    KResult -> KItem {}
    "[" InsertDzValueList "]" -> Value {cons("Value1445Syn")}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1446Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1447Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1448Syn")}
    "getKLabel" K -> KLabel {cons("KLabel1449Syn")}
    "$intervla2List" "(" InsertDzInterval ")" -> ValueList {cons("ValueList1450Syn")}
    Float "==Float" Float -> Bool {left, cons("Bool1452Syn")}
    "asin" "(" InsertDzExp ")" -> Exp {cons("Exp1455Syn")}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1456Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1457Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1458Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1459Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1462Syn")}
    String "<=String" String -> Bool {cons("Bool1464Syn")}
    "Float2String" "(" InsertDzFloat "," InsertDzString ")" -> String {cons("String1465Syn")}
    "#EOF" -> IOError {cons("IOError1466Syn")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1468Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1470Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1473Syn")}
    ValueList "$setminus" ValueList -> ValueList {cons("ValueList1475Syn")}
    ValFld "" ValFldList -> ValFldList {cons("ValFldList1ListSyn")}
    ".ValFldList" -> ValFldList {cons("ValFldList1Empty")}
    K "=K" K -> Bool {cons("Bool1476Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1477Syn")}
    "#ESPIPE" -> IOError {cons("IOError1479Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1480Syn")}
    "cos" "(" InsertDzExp ")" -> Exp {cons("Exp1482Syn")}
    K "in" List -> Bool {cons("Bool1483Syn")}
    Value "." "$update" "(" InsertDzId "," InsertDzExtendedValue ")" -> Value {cons("Value1484Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1486Syn")}
    "{" "}" -> Stmt {cons("Stmt1488Syn")}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1490Syn")}
    Bool -> Value {}
    ValueOrValueList "." "$insert" "(" InsertDzInt "," InsertDzExtendedValue ")" -> ValueOrValueList {cons("ValueOrValueList1492Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1493Syn")}
    Set    -> InsertDzSet
    ValueList    -> InsertDzValueList
    ValFldList    -> InsertDzValFldList
    ExtendedValue    -> InsertDzExtendedValue
    K    -> InsertDzK
    String    -> InsertDzString
    KList    -> InsertDzKList
    Int    -> InsertDzInt
    Stmt    -> InsertDzStmt
    Float    -> InsertDzFloat
    KLabel    -> InsertDzKLabel
    OpRel    -> InsertDzOpRel
    Bool    -> InsertDzBool
    Char    -> InsertDzChar
    Exps    -> InsertDzExps
    Value    -> InsertDzValue
    Ids    -> InsertDzIds
    List    -> InsertDzList
    Id    -> InsertDzId
    Exp    -> InsertDzExp
    Map    -> InsertDzMap
    KItem    -> InsertDzKItem
    Interval    -> InsertDzInterval


    VARID  ":Nat"        -> NatDzVar            {cons("Nat12Var")}
    VARID  ":Nat{" TagListDz "}"        -> NatDzVar            {cons("Nat12VarAttr")}
    VARID  ":Set"        -> SetDzVar            {cons("Set12Var")}
    VARID  ":Set{" TagListDz "}"        -> SetDzVar            {cons("Set12VarAttr")}
    VARID  ":ValueOrValueList"        -> ValueOrValueListDzVar            {cons("ValueOrValueList12Var")}
    VARID  ":ValueOrValueList{" TagListDz "}"        -> ValueOrValueListDzVar            {cons("ValueOrValueList12VarAttr")}
    VARID  ":ValueList"        -> ValueListDzVar            {cons("ValueList12Var")}
    VARID  ":ValueList{" TagListDz "}"        -> ValueListDzVar            {cons("ValueList12VarAttr")}
    VARID  ":MInt"        -> MIntDzVar            {cons("MInt12Var")}
    VARID  ":MInt{" TagListDz "}"        -> MIntDzVar            {cons("MInt12VarAttr")}
    VARID  ":LowerCase"        -> LowerCaseDzVar            {cons("LowerCase12Var")}
    VARID  ":LowerCase{" TagListDz "}"        -> LowerCaseDzVar            {cons("LowerCase12VarAttr")}
    VARID  ":CamelCaseId"        -> CamelCaseIdDzVar            {cons("CamelCaseId12Var")}
    VARID  ":CamelCaseId{" TagListDz "}"        -> CamelCaseIdDzVar            {cons("CamelCaseId12VarAttr")}
    VARID  ":String"        -> StringDzVar            {cons("String12Var")}
    VARID  ":String{" TagListDz "}"        -> StringDzVar            {cons("String12VarAttr")}
    VARID  ":Int"        -> IntDzVar            {cons("Int12Var")}
    VARID  ":Int{" TagListDz "}"        -> IntDzVar            {cons("Int12VarAttr")}
    VARID  ":Stmt"        -> StmtDzVar            {cons("Stmt12Var")}
    VARID  ":Stmt{" TagListDz "}"        -> StmtDzVar            {cons("Stmt12VarAttr")}
    VARID  ":ValFld"        -> ValFldDzVar            {cons("ValFld12Var")}
    VARID  ":ValFld{" TagListDz "}"        -> ValFldDzVar            {cons("ValFld12VarAttr")}
    VARID  ":Bool"        -> BoolDzVar            {cons("Bool12Var")}
    VARID  ":Bool{" TagListDz "}"        -> BoolDzVar            {cons("Bool12VarAttr")}
    VARID  ":OpRel"        -> OpRelDzVar            {cons("OpRel12Var")}
    VARID  ":OpRel{" TagListDz "}"        -> OpRelDzVar            {cons("OpRel12VarAttr")}
    VARID  ":Char"        -> CharDzVar            {cons("Char12Var")}
    VARID  ":Char{" TagListDz "}"        -> CharDzVar            {cons("Char12VarAttr")}
    VARID  ":Ids"        -> IdsDzVar            {cons("Ids12Var")}
    VARID  ":Ids{" TagListDz "}"        -> IdsDzVar            {cons("Ids12VarAttr")}
    VARID  ":List"        -> ListDzVar            {cons("List12Var")}
    VARID  ":List{" TagListDz "}"        -> ListDzVar            {cons("List12VarAttr")}
    VARID  ":Stream"        -> StreamDzVar            {cons("Stream12Var")}
    VARID  ":Stream{" TagListDz "}"        -> StreamDzVar            {cons("Stream12VarAttr")}
    VARID  ":#Int"        -> DzIntDzVar            {cons("DzInt12Var")}
    VARID  ":#Int{" TagListDz "}"        -> DzIntDzVar            {cons("DzInt12VarAttr")}
    VARID  ":#String"        -> DzStringDzVar            {cons("DzString12Var")}
    VARID  ":#String{" TagListDz "}"        -> DzStringDzVar            {cons("DzString12VarAttr")}
    VARID  ":#Bool"        -> DzBoolDzVar            {cons("DzBool12Var")}
    VARID  ":#Bool{" TagListDz "}"        -> DzBoolDzVar            {cons("DzBool12VarAttr")}
    VARID  ":PascalCaseId"        -> PascalCaseIdDzVar            {cons("PascalCaseId12Var")}
    VARID  ":PascalCaseId{" TagListDz "}"        -> PascalCaseIdDzVar            {cons("PascalCaseId12VarAttr")}
    VARID  ":DVar"        -> DdVarDzVar            {cons("DdVar12Var")}
    VARID  ":DVar{" TagListDz "}"        -> DdVarDzVar            {cons("DdVar12VarAttr")}
    VARID  ":UpperCase"        -> UpperCaseDzVar            {cons("UpperCase12Var")}
    VARID  ":UpperCase{" TagListDz "}"        -> UpperCaseDzVar            {cons("UpperCase12VarAttr")}
    VARID  ":ValFldList"        -> ValFldListDzVar            {cons("ValFldList12Var")}
    VARID  ":ValFldList{" TagListDz "}"        -> ValFldListDzVar            {cons("ValFldList12VarAttr")}
    VARID  ":ExtendedValue"        -> ExtendedValueDzVar            {cons("ExtendedValue12Var")}
    VARID  ":ExtendedValue{" TagListDz "}"        -> ExtendedValueDzVar            {cons("ExtendedValue12VarAttr")}
    VARID  ":ExtendedValueList"        -> ExtendedValueListDzVar            {cons("ExtendedValueList12Var")}
    VARID  ":ExtendedValueList{" TagListDz "}"        -> ExtendedValueListDzVar            {cons("ExtendedValueList12VarAttr")}
    VARID  ":Float"        -> FloatDzVar            {cons("Float12Var")}
    VARID  ":Float{" TagListDz "}"        -> FloatDzVar            {cons("Float12VarAttr")}
    VARID  ":IOError"        -> IOErrorDzVar            {cons("IOError12Var")}
    VARID  ":IOError{" TagListDz "}"        -> IOErrorDzVar            {cons("IOError12VarAttr")}
    VARID  ":Exps"        -> ExpsDzVar            {cons("Exps12Var")}
    VARID  ":Exps{" TagListDz "}"        -> ExpsDzVar            {cons("Exps12VarAttr")}
    VARID  ":Value"        -> ValueDzVar            {cons("Value12Var")}
    VARID  ":Value{" TagListDz "}"        -> ValueDzVar            {cons("Value12VarAttr")}
    VARID  ":Id"        -> IdDzVar            {cons("Id12Var")}
    VARID  ":Id{" TagListDz "}"        -> IdDzVar            {cons("Id12VarAttr")}
    VARID  ":Exp"        -> ExpDzVar            {cons("Exp12Var")}
    VARID  ":Exp{" TagListDz "}"        -> ExpDzVar            {cons("Exp12VarAttr")}
    VARID  ":Map"        -> MapDzVar            {cons("Map12Var")}
    VARID  ":Map{" TagListDz "}"        -> MapDzVar            {cons("Map12VarAttr")}
    VARID  ":#Float"        -> DzFloatDzVar            {cons("DzFloat12Var")}
    VARID  ":#Float{" TagListDz "}"        -> DzFloatDzVar            {cons("DzFloat12VarAttr")}
    VARID  ":Interval"        -> IntervalDzVar            {cons("Interval12Var")}
    VARID  ":Interval{" TagListDz "}"        -> IntervalDzVar            {cons("Interval12VarAttr")}

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "ValueOrValueList"    -> VariableDz    {cons("ValueOrValueList1Cast")}
     K CastTypeDz "ValueOrValueList{" TagListDz "}"    -> VariableDz    {cons("ValueOrValueList1CastAttr")}
     K CastTypeDz "ValueList"    -> VariableDz    {cons("ValueList1Cast")}
     K CastTypeDz "ValueList{" TagListDz "}"    -> VariableDz    {cons("ValueList1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "Stmt"    -> VariableDz    {cons("Stmt1Cast")}
     K CastTypeDz "Stmt{" TagListDz "}"    -> VariableDz    {cons("Stmt1CastAttr")}
     K CastTypeDz "ValFld"    -> VariableDz    {cons("ValFld1Cast")}
     K CastTypeDz "ValFld{" TagListDz "}"    -> VariableDz    {cons("ValFld1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "OpRel"    -> VariableDz    {cons("OpRel1Cast")}
     K CastTypeDz "OpRel{" TagListDz "}"    -> VariableDz    {cons("OpRel1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "Ids"    -> VariableDz    {cons("Ids1Cast")}
     K CastTypeDz "Ids{" TagListDz "}"    -> VariableDz    {cons("Ids1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "DVar"    -> VariableDz    {cons("DdVar1Cast")}
     K CastTypeDz "DVar{" TagListDz "}"    -> VariableDz    {cons("DdVar1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "ValFldList"    -> VariableDz    {cons("ValFldList1Cast")}
     K CastTypeDz "ValFldList{" TagListDz "}"    -> VariableDz    {cons("ValFldList1CastAttr")}
     K CastTypeDz "ExtendedValue"    -> VariableDz    {cons("ExtendedValue1Cast")}
     K CastTypeDz "ExtendedValue{" TagListDz "}"    -> VariableDz    {cons("ExtendedValue1CastAttr")}
     K CastTypeDz "ExtendedValueList"    -> VariableDz    {cons("ExtendedValueList1Cast")}
     K CastTypeDz "ExtendedValueList{" TagListDz "}"    -> VariableDz    {cons("ExtendedValueList1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "Exps"    -> VariableDz    {cons("Exps1Cast")}
     K CastTypeDz "Exps{" TagListDz "}"    -> VariableDz    {cons("Exps1CastAttr")}
     K CastTypeDz "Value"    -> VariableDz    {cons("Value1Cast")}
     K CastTypeDz "Value{" TagListDz "}"    -> VariableDz    {cons("Value1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "Exp"    -> VariableDz    {cons("Exp1Cast")}
     K CastTypeDz "Exp{" TagListDz "}"    -> VariableDz    {cons("Exp1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     K CastTypeDz "Interval"    -> VariableDz    {cons("Interval1Cast")}
     K CastTypeDz "Interval{" TagListDz "}"    -> VariableDz    {cons("Interval1CastAttr")}
     NatDzVar   -> Nat
     SetDzVar   -> Set
     ValueOrValueListDzVar   -> ValueOrValueList
     ValueListDzVar   -> ValueList
     MIntDzVar   -> MInt
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     StringDzVar   -> String
     IntDzVar   -> Int
     StmtDzVar   -> Stmt
     ValFldDzVar   -> ValFld
     BoolDzVar   -> Bool
     OpRelDzVar   -> OpRel
     CharDzVar   -> Char
     IdsDzVar   -> Ids
     ListDzVar   -> List
     StreamDzVar   -> Stream
     DzIntDzVar   -> DzInt
     DzStringDzVar   -> DzString
     DzBoolDzVar   -> DzBool
     PascalCaseIdDzVar   -> PascalCaseId
     DdVarDzVar   -> DdVar
     UpperCaseDzVar   -> UpperCase
     ValFldListDzVar   -> ValFldList
     ExtendedValueDzVar   -> ExtendedValue
     ExtendedValueListDzVar   -> ExtendedValueList
     FloatDzVar   -> Float
     IOErrorDzVar   -> IOError
     ExpsDzVar   -> Exps
     ValueDzVar   -> Value
     IdDzVar   -> Id
     ExpDzVar   -> Exp
     MapDzVar   -> Map
     DzFloatDzVar   -> DzFloat
     IntervalDzVar   -> Interval
     K CastTypeDz "K"                         -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"                     -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


context-free restrictions
    NatDzVar -/- [a-zA-Z0-9]
    SetDzVar -/- [a-zA-Z0-9]
    ValueOrValueListDzVar -/- [a-zA-Z0-9]
    ValueListDzVar -/- [a-zA-Z0-9]
    MIntDzVar -/- [a-zA-Z0-9]
    LowerCaseDzVar -/- [a-zA-Z0-9]
    CamelCaseIdDzVar -/- [a-zA-Z0-9]
    StringDzVar -/- [a-zA-Z0-9]
    IntDzVar -/- [a-zA-Z0-9]
    StmtDzVar -/- [a-zA-Z0-9]
    ValFldDzVar -/- [a-zA-Z0-9]
    BoolDzVar -/- [a-zA-Z0-9]
    OpRelDzVar -/- [a-zA-Z0-9]
    CharDzVar -/- [a-zA-Z0-9]
    IdsDzVar -/- [a-zA-Z0-9]
    ListDzVar -/- [a-zA-Z0-9]
    StreamDzVar -/- [a-zA-Z0-9]
    DzIntDzVar -/- [a-zA-Z0-9]
    DzStringDzVar -/- [a-zA-Z0-9]
    DzBoolDzVar -/- [a-zA-Z0-9]
    PascalCaseIdDzVar -/- [a-zA-Z0-9]
    DdVarDzVar -/- [a-zA-Z0-9]
    UpperCaseDzVar -/- [a-zA-Z0-9]
    ValFldListDzVar -/- [a-zA-Z0-9]
    ExtendedValueDzVar -/- [a-zA-Z0-9]
    ExtendedValueListDzVar -/- [a-zA-Z0-9]
    FloatDzVar -/- [a-zA-Z0-9]
    IOErrorDzVar -/- [a-zA-Z0-9]
    ExpsDzVar -/- [a-zA-Z0-9]
    ValueDzVar -/- [a-zA-Z0-9]
    IdDzVar -/- [a-zA-Z0-9]
    ExpDzVar -/- [a-zA-Z0-9]
    MapDzVar -/- [a-zA-Z0-9]
    DzFloatDzVar -/- [a-zA-Z0-9]
    IntervalDzVar -/- [a-zA-Z0-9]
    VariableDz -/- [a-zA-Z0-9]
lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isValueOrValueList"      -> DzKLabel
    "isSymbolicValueOrValueList"      -> DzKLabel
    "#symValueOrValueList"      -> DzKLabel
    "isValueList"      -> DzKLabel
    "isSymbolicValueList"      -> DzKLabel
    "#symValueList"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isStmt"      -> DzKLabel
    "isSymbolicStmt"      -> DzKLabel
    "#symStmt"      -> DzKLabel
    "isValFld"      -> DzKLabel
    "isSymbolicValFld"      -> DzKLabel
    "#symValFld"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isOpRel"      -> DzKLabel
    "isSymbolicOpRel"      -> DzKLabel
    "#symOpRel"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isIds"      -> DzKLabel
    "isSymbolicIds"      -> DzKLabel
    "#symIds"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "is#String"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isDVar"      -> DzKLabel
    "isSymbolicDVar"      -> DzKLabel
    "#symDVar"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isValFldList"      -> DzKLabel
    "isSymbolicValFldList"      -> DzKLabel
    "#symValFldList"      -> DzKLabel
    "isExtendedValue"      -> DzKLabel
    "isSymbolicExtendedValue"      -> DzKLabel
    "#symExtendedValue"      -> DzKLabel
    "isExtendedValueList"      -> DzKLabel
    "isSymbolicExtendedValueList"      -> DzKLabel
    "#symExtendedValueList"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isExps"      -> DzKLabel
    "isSymbolicExps"      -> DzKLabel
    "#symExps"      -> DzKLabel
    "isValue"      -> DzKLabel
    "isSymbolicValue"      -> DzKLabel
    "#symValue"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isExp"      -> DzKLabel
    "isSymbolicExp"      -> DzKLabel
    "#symExp"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "is#Float"      -> DzKLabel
    "isInterval"      -> DzKLabel
    "isSymbolicInterval"      -> DzKLabel
    "#symInterval"      -> DzKLabel



%% terminals reject
    "Int2Float" -> VARID {reject}
    "String2Base" -> VARID {reject}
    "Base2String" -> VARID {reject}
    "KLabel2String" -> VARID {reject}
    "U" -> VARID {reject}
    "Infinity" -> VARID {reject}
    "NaN" -> VARID {reject}
    "String2Int" -> VARID {reject}
    "ListItem" -> VARID {reject}
    "Float2Int" -> VARID {reject}
    "Float2String" -> VARID {reject}
    "String2Id" -> VARID {reject}
    "String2Float" -> VARID {reject}
    "String2KLabel" -> VARID {reject}
    "NULL" -> VARID {reject}
    "Int2String" -> VARID {reject}
    "Char2String" -> VARID {reject}
    "String2Char" -> VARID {reject}
    "Id2String" -> VARID {reject}
    "SetItem" -> VARID {reject}

lexical restrictions
    %% follow restrictions
    "==" -/- [I].[n].[t]
    "*" -/- [F].[l].[o].[a].[t]
    "=" -/- [K].[L].[a].[b].[e].[l]
    "/" -/- [I].[n].[t]
    "==" -/- [K]
    "==" -/- [B].[a].[g]
    "$insert" -/- [V].[a].[l]
    "-" -/- [F].[l].[o].[a].[t]
    "$removeAt" -/- [V].[a].[l]
    "replace" -/- [A].[l].[l]
    "=" -/- [K]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "sin" -/- [F].[l].[o].[a].[t]
    "atan" -/- [F].[l].[o].[a].[t]
    "=K" -/- [L].[a].[b].[e].[l]
    ">=" -/- [S].[t].[r].[i].[n].[g]
    ">=" -/- [I].[n].[t]
    "=" -/- [L].[i].[s].[t]
    "==K" -/- [L].[a].[b].[e].[l]
    "<=" -/- [S].[e].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "=" -/- [B].[a].[g]
    "+" -/- [I].[n].[t]
    "=" -/- [K].[L].[i].[s].[t]
    "-" -/- [I].[n].[t]
    "#parse" -/- [I].[n].[p].[u].[t]
    "#parse" -/- [T].[o].[k].[e].[n]
    "%" -/- [I].[n].[t]
    "acos" -/- [F].[l].[o].[a].[t]
    "+" -/- [S].[t].[r].[i].[n].[g]
    "=" -/- [I].[n].[t]
    "." -/- [S].[e].[t]
    "==" -/- [S].[t].[r].[i].[n].[g]
    "<=" -/- [I].[n].[t]
    "-" -/- [S].[e].[t]
    "=/=K" -/- [L].[i].[s].[t]
    "<" -/- [I].[n].[t]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=" -/- [S].[e].[t]
    "=K" -/- [L].[i].[s].[t]
    ">=" -/- [F].[l].[o].[a].[t]
    "==" -/- [B].[o].[o].[l]
    "^" -/- [I].[n].[t]
    "-" -/- [M].[a].[p]
    ">" -/- [I].[n].[t]
    "==K" -/- [L].[i].[s].[t]
    "in" -/- [K].[L].[i].[s].[t]
    "==" -/- [K].[L].[i].[s].[t]
    "fresh" -/- [I].[d]
    "." -/- [M].[a].[p]
    "$removeAllEqTo" -/- [V].[a].[l]
    "update" -/- [M].[a].[p]
    "%" -/- [F].[l].[o].[a].[t]
    "<=" -/- [S].[t].[r].[i].[n].[g]
    "asin" -/- [F].[l].[o].[a].[t]
    "*" -/- [I].[n].[t]
    "==" -/- [F].[l].[o].[a].[t]
    ">" -/- [F].[l].[o].[a].[t]
    "tan" -/- [F].[l].[o].[a].[t]
    "." -/- [L].[i].[s].[t]
    "$update" -/- [V].[a].[l]
    "+" -/- [F].[l].[o].[a].[t]
    "sqrt" -/- [F].[l].[o].[a].[t]
    "fresh" -/- [I].[n].[t]
    "^" -/- [F].[l].[o].[a].[t]
    "--" -/- [F].[l].[o].[a].[t]
    "<" -/- [S].[t].[r].[i].[n].[g]
    "<=" -/- [M].[a].[p]
    "==" -/- [K].[L].[a].[b].[e].[l]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    ">" -/- [S].[t].[r].[i].[n].[g]
    "cos" -/- [F].[l].[o].[a].[t]
    "<" -/- [F].[l].[o].[a].[t]
    "<=" -/- [F].[l].[o].[a].[t]
    "/" -/- [F].[l].[o].[a].[t]
    "removeAll" -/- [E].[q].[T].[o]
    "=" -/- [M].[a].[p]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    DzInt -/-  [0-9]
